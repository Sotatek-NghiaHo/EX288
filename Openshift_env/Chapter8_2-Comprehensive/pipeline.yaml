apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: words-cicd-pipeline
spec:
  workspaces:
    - name: shared

  params:
    - name: IMAGE_NAME
      type: string
      default: "words"

    - name: IMAGE_REGISTRY
      type: string
      default: "image-registry.openshift-image-registry.svc:5000"

    - name: GIT_REPO
      type: string
      default: "https://git.ocp4.example.com/developer/D0288-apps"

    - name: GIT_REVISION
      type: string
      default: "main"

    - name: APP_PATH
      type: string
      default: "apps/compreview-cicd/words"

  tasks:
    # üß© 1. Clone code t·ª´ Git
    - name: fetch-repository
      taskRef:
        resolver: cluster
        params:
          - name: kind
            value: task
          - name: name
            value: git-clone
          - name: namespace
            value: openshift-pipelines
      params:
        - name: URL
          value: $(params.GIT_REPO)
        - name: REVISION
          value: $(params.GIT_REVISION)
        - name: DELETE_EXISTING
          value: "true"
        - name: SSL_VERIFY
          value: "false"
      workspaces:
        - name: output
          workspace: shared

    # üì¶ 2. C√†i dependencies
    - name: npm-install
      taskRef:
        kind: Task
        name: npm
      workspaces:
        - name: source
          workspace: shared
      params:
        - name: CONTEXT
          value: $(params.APP_PATH)
        - name: ARGS
          value: install --no-package-lock
      runAfter:
        - fetch-repository

    # üß™ 3. Ch·∫°y test
    - name: npm-test
      taskRef:
        kind: Task
        name: npm
      workspaces:
        - name: source
          workspace: shared
      params:
        - name: CONTEXT
          value: $(params.APP_PATH)
        - name: ARGS
          value: test
      runAfter:
        - npm-install

    # üßπ 4. Ch·∫°y lint
    - name: npm-lint
      taskRef:
        kind: Task
        name: npm
      workspaces:
        - name: source
          workspace: shared
      params:
        - name: CONTEXT
          value: $(params.APP_PATH)
        - name: ARGS
          value: run lint
      runAfter:
        - npm-install

    # üèóÔ∏è 5. Build + Push image
    - name: build-push-image
      taskRef:
        resolver: cluster
        params:
          - name: kind
            value: task
          - name: name
            value: buildah
          - name: namespace
            value: openshift-pipelines
      params:
        - name: IMAGE
          value: $(params.IMAGE_REGISTRY)/$(context.pipelineRun.namespace)/$(params.IMAGE_NAME):$(context.pipelineRun.uid)
        - name: DOCKERFILE
          value: ./Containerfile
        - name: CONTEXT
          value: $(params.APP_PATH)
      workspaces:
        - name: source
          workspace: shared
      runAfter:
        - npm-test
        - npm-lint

    # üöÄ 6. Tri·ªÉn khai ra OpenShift
    - name: oc-deploy
      taskRef:
        resolver: cluster
        params:
          - name: kind
            value: task
          - name: name
            value: openshift-client
          - name: namespace
            value: openshift-pipelines
      workspaces:
        - name: manifest_dir
          workspace: shared
      params:
        - name: SCRIPT
          value: |
            oc process -f $(params.APP_PATH)/kubefiles/app.yaml \
              -p IMAGE_NAME=$(params.IMAGE_REGISTRY)/$(context.pipelineRun.namespace)/$(params.IMAGE_NAME):$(context.pipelineRun.uid) \
              | oc apply -f -
      runAfter:
        - build-push-image
